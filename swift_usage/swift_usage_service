#!/usr/bin/env python
from ConfigParser import ConfigParser
import os.path
import sys
import bottle # setup: sudo pip install bottle
import datetime
import hmac
import hashlib
import urllib
from swift_usage.utils import db_connect # requires pymongo

conf_file = ""
conf = ConfigParser({ # defaults
            "service-host":"127.0.0.1",
            "service-port":"8888",
            "service-reloader":"False"
        })

if os.path.exists("/etc/swift/swift-usage.conf"):
    conf_file = "/etc/swift/swift-usage.conf"

conf.read(conf_file)    

# load optional config if it exists in conf file.
service_host = conf.get('swift-usage-service', 'service-host')
service_port = int(conf.get('swift-usage-service', 'service-port'))
service_reloader = conf.get('swift-usage-service', 'service-reloader')
    

# @decorator: verify that the incoming request has a valid apikey and signature.
def authorize(callback):
    def validate(*args, **kwargs):
        # rebuild the signature in order to check if the signature that was passed is valid.
        sig_params = dict((k.lower(), v.lower()) for k,v in bottle.request.query.items()) # signature items are the lower cased query parameters. 
        if "signature" in sig_params:
            del(sig_params["signature"]) # remove the signature because it was not included in the creation of the signature.
        else:
            bottle.abort(403, "The request is missing the required 'signature'.")
        sig_str = bottle.request.path+"?"+"&".join(sorted(map(lambda (k,v):k+"="+v, sig_params.items())))
        
        if "apikey" in bottle.request.query:
            db = db_connect.db
            keys = db.keys.find_one({"api_key":bottle.request.query.apikey})
            if keys:
                signature = hmac.new(keys["secret_key"].encode('utf-8'), sig_str, hashlib.sha1).hexdigest()
                if signature == bottle.request.query.signature:
                    return callback(*args, **kwargs)
                else:
                    bottle.abort(403, "The request is not authorized.")
            else:
                bottle.abort(403, "The request is not authorized.")
        else:
            bottle.abort(403, "The request is missing the required 'apikey'.")
    return validate


# @decorator: verify that the incoming request is by an admin (MUST be used with @authorize for security).
def verify_admin(callback):
    def validate(*args, **kwargs):
        if "apikey" in bottle.request.query:
            db = db_connect.db
            keys = db.keys.find_one({"api_key":bottle.request.query.apikey})
            if keys:
                if "admin" in keys and keys["admin"]:
                    return callback(*args, **kwargs)
                else:
                    bottle.abort(403, "The request is not authorized.")
            else:
                bottle.abort(403, "The request is not authorized.")
        else:
            bottle.abort(403, "The request is missing the required 'apikey'.")
    return validate


# homepage:  if we want to have any 'basic info', we would put it here.
@bottle.route('/')
def index():
    return "Swift Usage API"


# usage syntax:  describe the syntax for the  usage functionality.
@bottle.route('/usage')
def usage_index():
    return "URL Syntax: /usage/account?start=2012030100&end=2012030300&apikey=520f6...6bf38&signature=83a12...dbec1"


# usage function: does the usage work.
@bottle.route('/usage/<account>', apply=[authorize])
def usage(account):
    labels_to_output = ['COPY', 'DELETE', 'GET', 'HEAD', 'POST', 'PUT', 'bytes_used', 'public_bw_in', 'public_bw_out', 'public_request']
    f_str = bottle.request.query.start
    t_str = bottle.request.query.end
    if not f_str or not t_str or len(f_str) != 10 or len(t_str) != 10:
        bottle.abort(400, "You must specify 'start' and 'end' dates. Check '/usage' for syntax.")
    else:
        output = {}
        db = db_connect.db
        
        # handle the unique request for a single hour of data.
        if f_str == t_str: # start and end dates are the same
            usage = db.usage.find_one({"account":account, "usage.hour":f_str})
            if usage:
                hourly_usage = [data for data in usage['usage'] if data['hour'] == f_str]
                if hourly_usage:
                    for k,v in hourly_usage[0]['data'].items(): # loop through the database data
                        if k in labels_to_output: # limit the data as per config                        
                            output[k] = int(v) # put the data in the output object.
            return output
        
        # handle all requests other than the 'single hour' request.
        usage_data = []
        for month_data in db.usage.find({"account":account, "usage.hour":{"$gte":f_str}, "usage.hour":{"$lt":t_str}}):
            monthly_usage = [data for data in month_data['usage'] if data['hour'] >= f_str and data['hour'] < t_str]
            usage_data += monthly_usage
            
        item_count = len(usage_data)
        for usage in usage_data:
            for k,v in usage['data'].items(): # loop through the database data
                if k in labels_to_output: # limit the data as per config
                    if k in output:
                        output[k] = int(output[k]) + int(v) # this label exists, sum it with the current value
                    else:
                        output[k] = int(v) # this label does not exist yet, seed it with the current value
        if 'bytes_used' in output:
            output['bytes_used'] = output['bytes_used'] / item_count # bytes_used should be an average.
        return output


# generate keys: creates new 'non-admin' authorization keys (requires 'admin').
@bottle.route('/generate_key/<label>', apply=[authorize, verify_admin])
def generate_key(label):
    db = db_connect.db
    keys = {}
    keys["label"] = label
    keys["api_key"] = hmac.new('cloudops', str(datetime.datetime.now()), hashlib.sha1).hexdigest()
    keys["secret_key"] = hmac.new(keys["api_key"], 'cloudops', hashlib.sha1).hexdigest()
    db.keys.insert({"api_key":keys["api_key"], "secret_key":keys["secret_key"], "label":keys["label"]})
    return keys


# favicon: serve a favicon.ico so the pages do not return a 404 for the /favicon.ico path in the browser.
@bottle.route('/favicon.ico')
def favicon():
    return bottle.static_file('favicon.ico', root='./static/')


# enable debugging.
bottle.debug(True)

# start the server.
bottle.run(server=bottle.PasteServer, host=service_host, port=service_port, reloader=service_reloader)
